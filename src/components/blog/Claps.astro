---
// Claps.astro
export interface Props {
  postId: string;
  initialCount?: number;
  class?: string;
}

const { postId, initialCount = 0, class: className = '' } = Astro.props;
---

<div class={`claps-container ${className}`} data-post-id={postId}>
  <button id="clap-btn" class="flex items-center space-x-2 text-gray-600 dark:text-gray-300 hover:text-primary transition-colors">
    <svg id="clap-icon" class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
    </svg>
    <span id="clap-count">{initialCount}</span>
  </button>
</div>

<script>
  const postId = document.querySelector('.claps-container').dataset.postId;
  const clapBtn = document.getElementById('clap-btn');
  const clapCount = document.getElementById('clap-count');
  const clapIcon = document.getElementById('clap-icon');

  // Get stored data
  const storageKey = `claps_${postId}`;
  let userClaps = parseInt(localStorage.getItem(storageKey) || '0');
  let totalClaps = parseInt(clapCount.textContent) + userClaps;

  clapCount.textContent = totalClaps;

  // Update icon if already clapped
  if (userClaps > 0) {
    clapIcon.classList.add('text-primary');
  }

  clapBtn.addEventListener('click', () => {
    userClaps += 1;
    totalClaps += 1;
    clapCount.textContent = totalClaps;
    clapIcon.classList.add('text-primary');

    // Animate
    clapIcon.style.transform = 'scale(1.2)';
    setTimeout(() => {
      clapIcon.style.transform = 'scale(1)';
    }, 200);

    // Store
    localStorage.setItem(storageKey, userClaps.toString());
  });
</script>