---
// TableOfContents.astro - Auto-generated table of contents from post headings
interface Props {
  content?: string;
  minHeadingLevel?: number;
  maxHeadingLevel?: number;
  className?: string;
}

const { content, minHeadingLevel = 2, maxHeadingLevel = 4, className = '' } = Astro.props;
---

<div class={`table-of-contents ${className}`}>
  <div class="toc-sticky bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-4 shadow-sm">
    <div class="toc-header flex items-center justify-between mb-4">
      <h3 class="text-lg font-semibold text-gray-900 dark:text-white flex items-center">
        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16"></path>
        </svg>
        Table of Contents
      </h3>
      <button
        id="toc-toggle"
        class="md:hidden p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 transition-colors duration-200"
        aria-label="Toggle table of contents"
      >
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7"></path>
        </svg>
      </button>
    </div>

    <nav id="toc-nav" class="toc-nav">
      <ul id="toc-list" class="space-y-1 text-sm">
        <!-- Table of contents will be generated by JavaScript -->
      </ul>
    </nav>

    <div id="toc-progress" class="toc-progress mt-4 hidden">
      <div class="flex items-center justify-between text-xs text-gray-600 dark:text-gray-400 mb-1">
        <span>Reading Progress</span>
        <span id="progress-percentage">0%</span>
      </div>
      <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-1">
        <div id="progress-bar" class="bg-blue-600 h-1 rounded-full transition-all duration-300" style="width: 0%"></div>
      </div>
    </div>
  </div>
</div>

<style>
  .table-of-contents {
    position: sticky;
    top: 2rem;
  }

  .toc-sticky {
    max-height: calc(100vh - 4rem);
    overflow-y: auto;
  }

  .toc-nav {
    max-height: 60vh;
    overflow-y: auto;
  }

  .toc-nav::-webkit-scrollbar {
    width: 4px;
  }

  .toc-nav::-webkit-scrollbar-track {
    background: transparent;
  }

  .toc-nav::-webkit-scrollbar-thumb {
    background: rgba(156, 163, 175, 0.3);
    border-radius: 2px;
  }

  .toc-nav::-webkit-scrollbar-thumb:hover {
    background: rgba(156, 163, 175, 0.5);
  }

  .toc-item {
    @apply relative pl-4 border-l border-gray-200 dark:border-gray-600 transition-colors duration-200;
  }

  .toc-item:hover {
    @apply border-blue-400;
  }

  .toc-item.active {
    @apply border-blue-600 bg-blue-50 dark:bg-blue-900/20;
  }

  .toc-item.active::before {
    content: '';
    @apply absolute left-0 top-0 bottom-0 w-1 bg-blue-600 rounded-r;
  }

  .toc-link {
    @apply block py-1 px-2 text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors duration-200;
  }

  .toc-link.active {
    @apply text-blue-600 dark:text-blue-400 font-medium;
  }

  .toc-h2 {
    @apply font-medium;
  }

  .toc-h3 {
    @apply pl-4 text-sm;
  }

  .toc-h4 {
    @apply pl-8 text-sm;
  }

  /* Mobile styles */
  @media (max-width: 768px) {
    .table-of-contents {
      position: relative;
      top: auto;
    }

    .toc-sticky {
      max-height: none;
    }

    #toc-nav {
      max-height: 200px;
    }
  }
</style>

<script>
  class TableOfContents {
    private static tocList: HTMLElement;
    private static tocNav: HTMLElement;
    private static progressBar: HTMLElement;
    private static progressPercentage: HTMLElement;
    private static tocToggle: HTMLElement;
    private static headings: HTMLElement[] = [];
    private static activeHeading: HTMLElement | null = null;

    static init() {
      this.tocList = document.getElementById('toc-list')!;
      this.tocNav = document.getElementById('toc-nav')!;
      this.progressBar = document.getElementById('progress-bar')!;
      this.progressPercentage = document.getElementById('progress-percentage')!;
      this.tocToggle = document.getElementById('toc-toggle')!;

      if (!this.tocList) return;

      this.generateTOC();
      this.setupEventListeners();
      this.updateProgress();
    }

    private static generateTOC() {
      // Find all headings in the main content
      const content = document.querySelector('.prose') || document.querySelector('main') || document.body;
      const headings = content.querySelectorAll('h1, h2, h3, h4, h5, h6');

      if (headings.length === 0) {
        this.tocList.innerHTML = '<li class="text-gray-500 dark:text-gray-400 text-sm">No headings found</li>';
        return;
      }

      const tocItems: string[] = [];
      let currentLevel = 0;

      headings.forEach((heading, index) => {
        const level = parseInt(heading.tagName.charAt(1));
        const text = heading.textContent?.trim() || '';
        const id = heading.id || `heading-${index}`;

        // Ensure heading has an ID
        if (!heading.id) {
          heading.id = id;
        }

        // Skip if level is outside our range
        if (level < 2 || level > 4) return;

        // Add to headings array for scroll tracking
        this.headings.push(heading as HTMLElement);

        // Generate TOC item
        const indentClass = level === 2 ? 'toc-h2' : level === 3 ? 'toc-h3' : 'toc-h4';
        const tocItem = `
          <li class="toc-item">
            <a href="#${id}" class="toc-link ${indentClass}" data-heading="${id}">
              ${text}
            </a>
          </li>
        `;

        tocItems.push(tocItem);
      });

      this.tocList.innerHTML = tocItems.join('');

      // Show progress bar if we have headings
      if (this.headings.length > 0) {
        document.getElementById('toc-progress')!.classList.remove('hidden');
      }
    }

    private static setupEventListeners() {
      // Smooth scrolling for TOC links
      document.querySelectorAll('.toc-link').forEach(link => {
        link.addEventListener('click', (e) => {
          e.preventDefault();
          const targetId = link.getAttribute('data-heading');
          const target = document.getElementById(targetId!);

          if (target) {
            const headerOffset = 80; // Account for fixed header
            const elementPosition = target.offsetTop;
            const offsetPosition = elementPosition - headerOffset;

            window.scrollTo({
              top: offsetPosition,
              behavior: 'smooth'
            });
          }
        });
      });

      // Mobile toggle
      this.tocToggle.addEventListener('click', () => {
        const isExpanded = this.tocNav.classList.contains('expanded');

        if (isExpanded) {
          this.tocNav.classList.remove('expanded');
          this.tocNav.style.maxHeight = '200px';
          this.tocToggle.innerHTML = `
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7"></path>
            </svg>
          `;
        } else {
          this.tocNav.classList.add('expanded');
          this.tocNav.style.maxHeight = 'none';
          this.tocToggle.innerHTML = `
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
            </svg>
          `;
        }
      });

      // Scroll event for active heading tracking
      let ticking = false;
      window.addEventListener('scroll', () => {
        if (!ticking) {
          requestAnimationFrame(() => {
            this.updateActiveHeading();
            this.updateProgress();
            ticking = false;
          });
          ticking = true;
        }
      });

      // Initial update
      this.updateActiveHeading();
    }

    private static updateActiveHeading() {
      const scrollPosition = window.pageYOffset + 100; // Offset for header

      // Remove active class from all items
      document.querySelectorAll('.toc-item').forEach(item => {
        item.classList.remove('active');
      });
      document.querySelectorAll('.toc-link').forEach(link => {
        link.classList.remove('active');
      });

      // Find the current active heading
      for (let i = this.headings.length - 1; i >= 0; i--) {
        const heading = this.headings[i];
        if (heading.offsetTop <= scrollPosition) {
          const tocLink = document.querySelector(`[data-heading="${heading.id}"]`) as HTMLElement;
          if (tocLink) {
            tocLink.classList.add('active');
            tocLink.closest('.toc-item')?.classList.add('active');
          }
          break;
        }
      }
    }

    private static updateProgress() {
      if (this.headings.length === 0) return;

      const scrollTop = window.pageYOffset;
      const windowHeight = window.innerHeight;
      const documentHeight = document.documentElement.scrollHeight;
      const totalScrollable = documentHeight - windowHeight;
      const scrollPercentage = Math.min(100, Math.max(0, (scrollTop / totalScrollable) * 100));

      this.progressBar.style.width = `${scrollPercentage}%`;
      this.progressPercentage.textContent = `${Math.round(scrollPercentage)}%`;
    }
  }

  // Initialize on page load
  document.addEventListener('DOMContentLoaded', () => {
    TableOfContents.init();
  });
</script>