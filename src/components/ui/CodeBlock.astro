---
// CodeBlock.astro - Enhanced code block with syntax highlighting, copy button, and expand/collapse
interface Props {
  code: string;
  language?: string;
  filename?: string;
  expandable?: boolean;
  maxHeight?: string;
}

const { code, language = 'text', filename, expandable = false, maxHeight = '400px' } = Astro.props;
---

<div class="code-block-wrapper my-6 rounded-lg overflow-hidden border border-gray-200 dark:border-gray-700">
  {filename && (
    <div class="bg-gray-100 dark:bg-gray-800 px-4 py-2 border-b border-gray-200 dark:border-gray-700">
      <span class="text-sm font-mono text-gray-600 dark:text-gray-400">{filename}</span>
    </div>
  )}

  <div class="relative group">
    <div class="absolute top-3 right-3 z-10 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
      <button
        class="copy-btn bg-gray-800 hover:bg-gray-700 text-white px-3 py-1 rounded text-sm font-medium transition-colors duration-200"
        data-code={code}
        aria-label="Copy code to clipboard"
      >
        <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
        </svg>
        Copy
      </button>
    </div>

    <pre
      class={`language-${language} ${expandable ? 'expandable' : ''}`}
      style={expandable ? `max-height: ${maxHeight}; overflow: hidden;` : ''}
    >
      <code class={`language-${language}`}>{code}</code>
    </pre>

    {expandable && (
      <div class="bg-gray-100 dark:bg-gray-800 px-4 py-2 border-t border-gray-200 dark:border-gray-700">
        <button
          class="expand-btn text-sm text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 font-medium transition-colors duration-200"
          aria-label="Expand code block"
        >
          <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
          </svg>
          Expand code
        </button>
      </div>
    )}
  </div>
</div>

<style>
  .code-block-wrapper {
    position: relative;
  }

  .code-block-wrapper pre {
    margin: 0;
    padding: 1rem;
    background: #f8f9fa;
    border-radius: 0;
  }

  .dark .code-block-wrapper pre {
    background: #1f2937;
  }

  .code-block-wrapper .expandable {
    position: relative;
  }

  .code-block-wrapper .expandable::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 40px;
    background: linear-gradient(transparent, #f8f9fa);
    pointer-events: none;
  }

  .dark .code-block-wrapper .expandable::after {
    background: linear-gradient(transparent, #1f2937);
  }

  .code-block-wrapper .copy-btn {
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .code-block-wrapper .copy-btn:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
  }

  .code-block-wrapper .copy-btn.copied {
    background: #10b981;
  }

  .code-block-wrapper .copy-btn.copied:hover {
    background: #059669;
  }
</style>

<script>
  // Copy to clipboard functionality
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.copy-btn').forEach(button => {
      button.addEventListener('click', async () => {
        const code = button.getAttribute('data-code');
        if (code) {
          try {
            await navigator.clipboard.writeText(code);
            const originalText = button.innerHTML;
            button.innerHTML = `
              <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              </svg>
              Copied!
            `;
            button.classList.add('copied');

            setTimeout(() => {
              button.innerHTML = originalText;
              button.classList.remove('copied');
            }, 2000);
          } catch (err) {
            console.error('Failed to copy code:', err);
            const originalText = button.innerHTML;
            button.innerHTML = `
              <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
              Failed
            `;

            setTimeout(() => {
              button.innerHTML = originalText;
            }, 2000);
          }
        }
      });
    });

    // Expand/collapse functionality
    document.querySelectorAll('.expand-btn').forEach(button => {
      button.addEventListener('click', () => {
        const pre = button.closest('.code-block-wrapper')?.querySelector('pre');
        if (pre) {
          const isExpanded = pre.classList.contains('expanded');

          if (isExpanded) {
            pre.style.maxHeight = '400px';
            pre.classList.remove('expanded');
            button.innerHTML = `
              <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
              </svg>
              Expand code
            `;
          } else {
            pre.style.maxHeight = 'none';
            pre.classList.add('expanded');
            button.innerHTML = `
              <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7"></path>
              </svg>
              Collapse code
            `;
          }
        }
      });
    });
  });
</script>